<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://sunghoon0307.github.io/</id><title>Hoon's Devlog</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2022-06-23T17:15:00+09:00</updated> <author> <name>sunghoon</name> <uri>https://sunghoon0307.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://sunghoon0307.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://sunghoon0307.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 sunghoon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[JAVA8_함수형 프로그래밍] String, Comparator 그리고 filter</title><link href="https://sunghoon0307.github.io/posts/Java8-String,Comparator-%EA%B7%B8%EB%A6%AC%EA%B3%A0-filter/" rel="alternate" type="text/html" title="[JAVA8_함수형 프로그래밍] String, Comparator 그리고 filter" /><published>2022-06-23T17:00:00+09:00</published> <updated>2022-06-23T17:14:37+09:00</updated> <id>https://sunghoon0307.github.io/posts/Java8-String,Comparator-%EA%B7%B8%EB%A6%AC%EA%B3%A0-filter/</id> <content src="https://sunghoon0307.github.io/posts/Java8-String,Comparator-%EA%B7%B8%EB%A6%AC%EA%B3%A0-filter/" /> <author> <name>sunghoon</name> </author> <category term="Java8" /> <summary> ▶︎ 스트링 이터레이션 chars() 메서드는 forEach() 내부 이터레이터를 사용하여 이터레이션하는 스트림을 리턴한다. final String str = "w00t"; str.chars() .forEach(ch -&amp;gt; System.out.println(ch)); // 메서드 레퍼런스로 변환 str.chars() .forEach(System.out::println); 119 48 48 116 → 문자가 출력되는 대신 숫자가 출력됐다. 그 이유는 chars() 메서드가 Characters의 스트림 대신 문자를 표현하는 intStream을 리턴했기 때문 // chars() 메서드내부 public default IntStream chars() { clas... </summary> </entry> <entry><title>[JAVA8_함수형 프로그래밍] 컬렉션의 사용</title><link href="https://sunghoon0307.github.io/posts/Java8-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%98-%EC%82%AC%EC%9A%A9/" rel="alternate" type="text/html" title="[JAVA8_함수형 프로그래밍] 컬렉션의 사용" /><published>2022-06-06T12:40:00+09:00</published> <updated>2022-06-23T17:14:37+09:00</updated> <id>https://sunghoon0307.github.io/posts/Java8-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%98-%EC%82%AC%EC%9A%A9/</id> <content src="https://sunghoon0307.github.io/posts/Java8-%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%98-%EC%82%AC%EC%9A%A9/" /> <author> <name>sunghoon</name> </author> <category term="Java8" /> <summary> ▶︎ 리스트를 사용한 이터레이션 final List&amp;lt;String&amp;gt; friends = Arrays.asList("Brian", "Nate", "Neal", "Raju", "Sara", "Scott"); 기존 관습적인 방법 // 1번 for (int i = 0; i &amp;lt; friends.size(); i++) { System.out.println(friends.get(i)); } // 2번 for (String name : friends) { System.out.println("name = " + name); } 함수형 스타일 // 어노니머스 이너클래스 (Anonymous Inner Class) friends.forEach(new Consumer&amp;lt;Str... </summary> </entry> <entry><title>[JPA] 값 타입</title><link href="https://sunghoon0307.github.io/posts/JPA10/" rel="alternate" type="text/html" title="[JPA] 값 타입" /><published>2022-02-02T14:50:00+09:00</published> <updated>2022-02-02T15:01:22+09:00</updated> <id>https://sunghoon0307.github.io/posts/JPA10/</id> <content src="https://sunghoon0307.github.io/posts/JPA10/" /> <author> <name>sunghoon</name> </author> <category term="JPA" /> <summary> ◼︎ 값 타입 ▶︎ JPA의 데이터 타입 분류 엔티티 타입 @Entity로 정의하는 객체 데이터가 변해도 식별자로 지속해서 추적 가능 예) 회원 엔티티의 키나 나이 값을 변경해도 식별자로 인식 가능 값 타입 int, Integer, String처럼 단순히 값으로 사용하는 자바 기본 타입이나 객체 식별자가 없고 값만 있으므로 변경시 추적 불가 예) 숫자 100을 200으로 변경하면 완전히 다른 값으로 대체 ▶︎ 값 타입 분류 기본값 타입 자바 기본 타입 (int, double) 래퍼 클래스(Integer, Long) String ... </summary> </entry> <entry><title>[JPA] 프록시와 연관관계 관리</title><link href="https://sunghoon0307.github.io/posts/JPA9/" rel="alternate" type="text/html" title="[JPA] 프록시와 연관관계 관리" /><published>2022-02-01T13:55:00+09:00</published> <updated>2022-02-02T15:05:17+09:00</updated> <id>https://sunghoon0307.github.io/posts/JPA9/</id> <content src="https://sunghoon0307.github.io/posts/JPA9/" /> <author> <name>sunghoon</name> </author> <category term="JPA" /> <summary> ◼︎ 프록시 ▶︎ 프록시 기초 em.find() : 데이터베이스를 통해서 실제 엔티티 객체 조회 em.getReference() : 데이터베이스 조회를 미루는 가짜(프록시) 엔티티 조회) ▶︎ 프록시 특징 실제 클래스를 상속 받아서 만들어짐 실제 클래스와 겉 모양이 같다. 사용하는 입장에서는 진짜 객체인지 프록시 객체인지 구분하지 않고 사용하면 됨(이론상) 프록시 객체는 실제 객체의 참조(target)를 보관 프록시 객체를 호출하면 프록시 객체는 실제 객체의 메소드 호출 //프록시 객체 초기화 Member member = em.getReference(Member.class, “id1”); member.getName(); 프록시 객체는 처... </summary> </entry> <entry><title>객체지향의 사실과 오해 2_타입과 추상화, 역할,책임,협력</title><link href="https://sunghoon0307.github.io/posts/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B42/" rel="alternate" type="text/html" title="객체지향의 사실과 오해 2_타입과 추상화, 역할,책임,협력" /><published>2022-01-02T20:40:00+09:00</published> <updated>2022-01-02T21:23:35+09:00</updated> <id>https://sunghoon0307.github.io/posts/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B42/</id> <content src="https://sunghoon0307.github.io/posts/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B42/" /> <author> <name>sunghoon</name> </author> <category term="책리뷰" /> <summary> [출처] [객체지향의 사실과 오해(조영호 지음, 위키북스, 2015)] ◼︎ 타입과 추상화 ▶︎ 추상화 어떤 양상, 세부 사항, 구조를 좀 더 명확하게 이해하기 위해 특정 절차나 물체를 의도적으로 생략하거나 감춤으로써 복잡도를 극복하는 방법이다. 구체적인 사물들 간의 공통점은 취하고 차이점은 버리는 일반화를 통해 단순하게 만드는 것 중요한 부분을 강조하기 위해 불필요한 세부 사항을 제거함으로써 단순하게 만드는 것 모든 경우에 추상화의 목적은 복잡성을 이해하기 쉬운 수준으로 단순화하는 것 ▶︎ 개념 공통점을 기반으로 객체들을 묶기 위한 그릇 일반적으로 우리가 인식하고 있는 다양한 사물이나 객체에 적용할 수 있는 아이디어나 관념 ... </summary> </entry> </feed>
